# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'simTab.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_simTab(object):
    def setupUi(self, simTab):
        simTab.setObjectName("simTab")
        simTab.resize(1005, 739)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(simTab.sizePolicy().hasHeightForWidth())
        simTab.setSizePolicy(sizePolicy)
        simTab.setMinimumSize(QtCore.QSize(0, 0))
        self.gridLayout = QtWidgets.QGridLayout(simTab)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.toolBox = QtWidgets.QToolBox(simTab)
        self.toolBox.setObjectName("toolBox")
        self.page1 = QtWidgets.QWidget()
        self.page1.setGeometry(QtCore.QRect(0, 0, 98, 96))
        self.page1.setObjectName("page1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.page1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.IOtreeWidget = QtWidgets.QTreeWidget(self.page1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.IOtreeWidget.sizePolicy().hasHeightForWidth())
        self.IOtreeWidget.setSizePolicy(sizePolicy)
        self.IOtreeWidget.setObjectName("IOtreeWidget")
        item_0 = QtWidgets.QTreeWidgetItem(self.IOtreeWidget)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.IOtreeWidget)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.IOtreeWidget)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        self.IOtreeWidget.header().setDefaultSectionSize(200)
        self.verticalLayout.addWidget(self.IOtreeWidget)
        self.toolBox.addItem(self.page1, "")
        self.page2 = QtWidgets.QWidget()
        self.page2.setGeometry(QtCore.QRect(0, 0, 975, 569))
        self.page2.setObjectName("page2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.page2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.BasicTree = QtWidgets.QTreeWidget(self.page2)
        self.BasicTree.setIndentation(20)
        self.BasicTree.setWordWrap(False)
        self.BasicTree.setObjectName("BasicTree")
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setToolTip(1, "")
        item_1.setWhatsThis(1, "")
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_0 = QtWidgets.QTreeWidgetItem(self.BasicTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        self.BasicTree.header().setCascadingSectionResizes(False)
        self.BasicTree.header().setDefaultSectionSize(200)
        self.BasicTree.header().setMinimumSectionSize(28)
        self.verticalLayout_2.addWidget(self.BasicTree)
        self.toolBox.addItem(self.page2, "")
        self.page3 = QtWidgets.QWidget()
        self.page3.setGeometry(QtCore.QRect(0, 0, 975, 569))
        self.page3.setObjectName("page3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.AddTree = QtWidgets.QTreeWidget(self.page3)
        self.AddTree.setObjectName("AddTree")
        item_0 = QtWidgets.QTreeWidgetItem(self.AddTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_0 = QtWidgets.QTreeWidgetItem(self.AddTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_0 = QtWidgets.QTreeWidgetItem(self.AddTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_0 = QtWidgets.QTreeWidgetItem(self.AddTree)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        self.AddTree.header().setDefaultSectionSize(300)
        self.verticalLayout_3.addWidget(self.AddTree)
        self.toolBox.addItem(self.page3, "")
        self.verticalLayout_7.addWidget(self.toolBox)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.resetButton = QtWidgets.QPushButton(simTab)
        self.resetButton.setObjectName("resetButton")
        self.horizontalLayout_3.addWidget(self.resetButton)
        self.packButton = QtWidgets.QPushButton(simTab)
        self.packButton.setText("")
        self.packButton.setObjectName("packButton")
        self.horizontalLayout_3.addWidget(self.packButton)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.remoteButton = QtWidgets.QPushButton(simTab)
        self.remoteButton.setEnabled(True)
        self.remoteButton.setObjectName("remoteButton")
        self.horizontalLayout_3.addWidget(self.remoteButton)
        self.runButton = QtWidgets.QPushButton(simTab)
        self.runButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.runButton.setObjectName("runButton")
        self.horizontalLayout_3.addWidget(self.runButton)
        self.cancelButton = QtWidgets.QPushButton(simTab)
        self.cancelButton.setEnabled(False)
        self.cancelButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cancelButton.setObjectName("cancelButton")
        self.horizontalLayout_3.addWidget(self.cancelButton)
        self.verticalLayout_7.addLayout(self.horizontalLayout_3)
        self.horizontalLayout.addLayout(self.verticalLayout_7)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout.addLayout(self.verticalLayout_6)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        self.retranslateUi(simTab)
        self.toolBox.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(simTab)

    def retranslateUi(self, simTab):
        _translate = QtCore.QCoreApplication.translate
        simTab.setWindowTitle(_translate("simTab", "Dialog"))
        self.IOtreeWidget.headerItem().setText(0, _translate("simTab", "Value"))
        self.IOtreeWidget.headerItem().setText(1, _translate("simTab", "Property"))
        __sortingEnabled = self.IOtreeWidget.isSortingEnabled()
        self.IOtreeWidget.setSortingEnabled(False)
        self.IOtreeWidget.topLevelItem(0).setText(0, _translate("simTab", "Input Files"))
        self.IOtreeWidget.topLevelItem(0).child(0).setText(1, _translate("simTab", "Base Directory"))
        self.IOtreeWidget.topLevelItem(0).child(1).setText(1, _translate("simTab", "Coordinates"))
        self.IOtreeWidget.topLevelItem(0).child(2).setText(1, _translate("simTab", "Structure"))
        self.IOtreeWidget.topLevelItem(0).child(3).setText(1, _translate("simTab", "Parameters"))
        self.IOtreeWidget.topLevelItem(1).setText(0, _translate("simTab", "Output Files"))
        self.IOtreeWidget.topLevelItem(1).child(0).setText(1, _translate("simTab", "OutputName"))
        self.IOtreeWidget.topLevelItem(2).setText(0, _translate("simTab", "Report Frequencies"))
        self.IOtreeWidget.topLevelItem(2).child(0).setText(1, _translate("simTab", "Energy"))
        self.IOtreeWidget.topLevelItem(2).child(1).setText(1, _translate("simTab", "Trajectory"))
        self.IOtreeWidget.topLevelItem(2).child(2).setText(1, _translate("simTab", "Restart"))
        self.IOtreeWidget.setSortingEnabled(__sortingEnabled)
        self.toolBox.setItemText(self.toolBox.indexOf(self.page1), _translate("simTab", "Page 1"))
        self.BasicTree.headerItem().setText(0, _translate("simTab", "Value"))
        self.BasicTree.headerItem().setText(1, _translate("simTab", "Property"))
        __sortingEnabled = self.BasicTree.isSortingEnabled()
        self.BasicTree.setSortingEnabled(False)
        self.BasicTree.topLevelItem(0).setText(0, _translate("simTab", "Timesteps*"))
        self.BasicTree.topLevelItem(0).child(0).setText(1, _translate("simTab", "Timesteps*"))
        self.BasicTree.topLevelItem(0).child(1).setText(1, _translate("simTab", "Timestep size*"))
        self.BasicTree.topLevelItem(0).child(2).setText(1, _translate("simTab", "Starting timestep value"))
        self.BasicTree.topLevelItem(0).child(3).setText(1, _translate("simTab", "Timesteps per cycle"))
        self.BasicTree.topLevelItem(1).setText(0, _translate("simTab", "Basic dynamics*"))
        self.BasicTree.topLevelItem(1).child(0).setText(1, _translate("simTab", "Initial temperature*"))
        self.BasicTree.topLevelItem(1).child(1).setText(1, _translate("simTab", "Allow center of mass motion?"))
        self.BasicTree.topLevelItem(1).child(2).setText(1, _translate("simTab", "Dielitric constant for system"))
        self.BasicTree.topLevelItem(1).child(3).setText(1, _translate("simTab", "Random number seed"))
        self.BasicTree.topLevelItem(1).child(4).setText(1, _translate("simTab", "Fixed bonds (ShakeH)"))
        self.BasicTree.topLevelItem(1).child(5).setText(1, _translate("simTab", "Allowable bond-length error"))
        self.BasicTree.topLevelItem(1).child(6).setText(1, _translate("simTab", "Maximum ShakeH iterations"))
        self.BasicTree.topLevelItem(1).child(7).setText(1, _translate("simTab", " Use SETTLE for waters?"))
        self.BasicTree.topLevelItem(2).setText(0, _translate("simTab", "Nonbonded interactions*"))
        self.BasicTree.topLevelItem(2).child(0).setText(1, _translate("simTab", "Exclusion for atoms with distances"))
        self.BasicTree.topLevelItem(2).child(1).setText(1, _translate("simTab", "Scaling factor for 1-4 interactions"))
        self.BasicTree.topLevelItem(2).child(2).setText(1, _translate("simTab", "Cutoff distance"))
        self.BasicTree.topLevelItem(2).child(3).setText(1, _translate("simTab", "Use switching function?"))
        self.BasicTree.topLevelItem(2).child(4).setText(1, _translate("simTab", "Distance to activate switching function"))
        self.BasicTree.topLevelItem(2).child(5).setText(1, _translate("simTab", "Distance between pairs for inclusions in pairlists"))
        self.BasicTree.topLevelItem(2).child(6).setText(1, _translate("simTab", "How to assign atoms to patches"))
        self.BasicTree.topLevelItem(2).child(7).setText(1, _translate("simTab", "Group cutoff"))
        self.BasicTree.topLevelItem(2).child(8).setText(1, _translate("simTab", "Extra length in patch dimensions"))
        self.BasicTree.topLevelItem(2).child(9).setText(1, _translate("simTab", "Minimum procsesses for pairlists"))
        self.BasicTree.topLevelItem(2).child(10).setText(1, _translate("simTab", "Regenerate pairlist every X steps per cycle"))
        self.BasicTree.topLevelItem(2).child(11).setText(1, _translate("simTab", "How often to print warnings"))
        self.BasicTree.topLevelItem(2).child(12).setText(1, _translate("simTab", "Tolerance reduction fraction on regeneration"))
        self.BasicTree.topLevelItem(2).child(13).setText(1, _translate("simTab", "Tolerance incrementation fraction on trigger"))
        self.BasicTree.topLevelItem(2).child(14).setText(1, _translate("simTab", "Tolerance trigger"))
        self.BasicTree.topLevelItem(3).setText(0, _translate("simTab", " Particle Mesh Ewald (PME) parameters"))
        self.BasicTree.topLevelItem(3).child(0).setText(1, _translate("simTab", "Use Particle Mesh Ewald (PME)"))
        self.BasicTree.topLevelItem(3).child(1).setText(1, _translate("simTab", "Grid size"))
        self.BasicTree.topLevelItem(3).child(2).setText(1, _translate("simTab", "Grid points in x dimension"))
        self.BasicTree.topLevelItem(3).child(3).setText(1, _translate("simTab", "Grid points in y dimension"))
        self.BasicTree.topLevelItem(3).child(4).setText(1, _translate("simTab", "Grid points in z dimension"))
        self.BasicTree.topLevelItem(3).child(5).setText(1, _translate("simTab", "PME direct space tolerance"))
        self.BasicTree.topLevelItem(3).child(6).setText(1, _translate("simTab", "PME interpolation order"))
        self.BasicTree.topLevelItem(3).child(7).setText(1, _translate("simTab", "Processors for FFT and reciprocal sum"))
        self.BasicTree.topLevelItem(3).child(8).setText(1, _translate("simTab", "Use estimates to optimize FFT?"))
        self.BasicTree.topLevelItem(3).child(9).setText(1, _translate("simTab", "Use FFTW wisdom archive file?"))
        self.BasicTree.topLevelItem(3).child(10).setText(1, _translate("simTab", "Name of the file for FFTW wisdom archive"))
        self.BasicTree.topLevelItem(4).setText(0, _translate("simTab", "Full direct parameters"))
        self.BasicTree.topLevelItem(4).child(0).setText(1, _translate("simTab", "Calculate full electrostatics directly?"))
        self.BasicTree.topLevelItem(5).setText(0, _translate("simTab", "Multiple timestep parameters"))
        self.BasicTree.topLevelItem(5).child(0).setText(1, _translate("simTab", "Timesteps between full electrostatic evaluations"))
        self.BasicTree.topLevelItem(5).child(1).setText(1, _translate("simTab", "Timesteps between nonbonded evaluation"))
        self.BasicTree.topLevelItem(5).child(2).setText(1, _translate("simTab", "MTS algorithm to be used"))
        self.BasicTree.topLevelItem(5).child(3).setText(1, _translate("simTab", "How should long and short range forces be split?"))
        self.BasicTree.topLevelItem(5).child(4).setText(1, _translate("simTab", "Use mollified impulse method (MOLLY)?"))
        self.BasicTree.topLevelItem(5).child(5).setText(1, _translate("simTab", "Allowable error for MOLLY"))
        self.BasicTree.topLevelItem(5).child(6).setText(1, _translate("simTab", "Maximum MOLLY iterations"))
        self.BasicTree.setSortingEnabled(__sortingEnabled)
        self.toolBox.setItemText(self.toolBox.indexOf(self.page2), _translate("simTab", "Page 2"))
        self.AddTree.headerItem().setText(0, _translate("simTab", "Value"))
        self.AddTree.headerItem().setText(1, _translate("simTab", "Property"))
        __sortingEnabled = self.AddTree.isSortingEnabled()
        self.AddTree.setSortingEnabled(False)
        self.AddTree.topLevelItem(0).setText(0, _translate("simTab", "Constraints and Restraints"))
        self.AddTree.topLevelItem(0).child(0).setText(0, _translate("simTab", "Harmonic constraint parameters"))
        self.AddTree.topLevelItem(0).child(0).child(0).setText(1, _translate("simTab", "Are constraints active?"))
        self.AddTree.topLevelItem(0).child(0).child(1).setText(1, _translate("simTab", "Exponent for harmonic constraint energy function"))
        self.AddTree.topLevelItem(0).child(0).child(2).setText(1, _translate("simTab", "PDB file containing constraint reference positions"))
        self.AddTree.topLevelItem(0).child(0).child(3).setText(1, _translate("simTab", "PDB file containing force constant values"))
        self.AddTree.topLevelItem(0).child(0).child(4).setText(1, _translate("simTab", "Column of PDB file containing force constant"))
        self.AddTree.topLevelItem(0).child(0).child(5).setText(1, _translate("simTab", "Restrain only selected Cartesian components?"))
        self.AddTree.topLevelItem(0).child(0).child(6).setText(1, _translate("simTab", "Restrain X components of the coordinates?"))
        self.AddTree.topLevelItem(0).child(0).child(7).setText(1, _translate("simTab", "Restrain Y components of the coordinates?"))
        self.AddTree.topLevelItem(0).child(0).child(8).setText(1, _translate("simTab", "Restrain Z components of the coordinates?"))
        self.AddTree.topLevelItem(0).child(1).setText(0, _translate("simTab", "Fixed atoms parameters"))
        self.AddTree.topLevelItem(0).child(1).child(0).setText(1, _translate("simTab", "Are there fixed atoms?"))
        self.AddTree.topLevelItem(0).child(1).child(1).setText(1, _translate("simTab", "Are forces between fixed atoms calculated?"))
        self.AddTree.topLevelItem(0).child(1).child(2).setText(1, _translate("simTab", "PDB file containing fixed atom parameters"))
        self.AddTree.topLevelItem(0).child(1).child(3).setText(1, _translate("simTab", "Column of PDB containing fixed atom parameters?"))
        self.AddTree.topLevelItem(1).setText(0, _translate("simTab", "Temperature Control and Equilibration"))
        self.AddTree.topLevelItem(1).child(0).setText(0, _translate("simTab", "Langevin temperature control"))
        self.AddTree.topLevelItem(1).child(0).child(0).setText(1, _translate("simTab", "Use Langevin dynamics?"))
        self.AddTree.topLevelItem(1).child(0).child(1).setText(1, _translate("simTab", "Temperature for Langevin dynamics"))
        self.AddTree.topLevelItem(1).child(0).child(2).setText(1, _translate("simTab", "Damping coefficient for Langevin dynamics"))
        self.AddTree.topLevelItem(1).child(0).child(3).setText(1, _translate("simTab", "Apply Langevin dynamics to hydrogen atoms?"))
        self.AddTree.topLevelItem(1).child(0).child(4).setText(1, _translate("simTab", "PDB file containing Langevin parameters"))
        self.AddTree.topLevelItem(1).child(0).child(5).setText(1, _translate("simTab", "Column of PDB from which to read coefficients"))
        self.AddTree.topLevelItem(1).child(1).setText(0, _translate("simTab", "Temperature coupling parameters"))
        self.AddTree.topLevelItem(1).child(1).child(0).setText(1, _translate("simTab", "Perform temperature coupling (tCouple)?"))
        self.AddTree.topLevelItem(1).child(1).child(1).setText(1, _translate("simTab", "Temperature for heat bath"))
        self.AddTree.topLevelItem(1).child(1).child(2).setText(1, _translate("simTab", "PDB file with tCouple parameters"))
        self.AddTree.topLevelItem(1).child(1).child(3).setText(1, _translate("simTab", "Column of PDB from which to read coefficients"))
        self.AddTree.topLevelItem(1).child(2).setText(0, _translate("simTab", "Temperature rescaling parameters"))
        self.AddTree.topLevelItem(1).child(2).child(0).setText(1, _translate("simTab", "Timesteps between temperature rescaling"))
        self.AddTree.topLevelItem(1).child(2).child(1).setText(1, _translate("simTab", "Temperature for equilibration"))
        self.AddTree.topLevelItem(1).child(3).setText(0, _translate("simTab", "Temperature reassignment parameters"))
        self.AddTree.topLevelItem(1).child(3).child(0).setText(1, _translate("simTab", "Use reassignment?"))
        self.AddTree.topLevelItem(1).child(3).child(1).setText(1, _translate("simTab", "Timesteps between reassignment"))
        self.AddTree.topLevelItem(1).child(3).child(2).setText(1, _translate("simTab", "Temperature for equilibration"))
        self.AddTree.topLevelItem(1).child(3).child(3).setText(1, _translate("simTab", "Temperature increment for equilibration"))
        self.AddTree.topLevelItem(1).child(3).child(4).setText(1, _translate("simTab", "Holding temperature for equlibration"))
        self.AddTree.topLevelItem(2).setText(0, _translate("simTab", "Pressure Control"))
        self.AddTree.topLevelItem(2).child(0).setText(1, _translate("simTab", "Use group pressure?"))
        self.AddTree.topLevelItem(2).child(1).setText(1, _translate("simTab", "Flexible cell"))
        self.AddTree.topLevelItem(2).child(2).setText(1, _translate("simTab", "Constant ratio in x-y plane"))
        self.AddTree.topLevelItem(2).child(3).setText(1, _translate("simTab", "Constant x-y dimensions"))
        self.AddTree.topLevelItem(2).child(4).setText(0, _translate("simTab", "Berendsen pressure bath coupling"))
        self.AddTree.topLevelItem(2).child(4).child(0).setText(1, _translate("simTab", "Use Berendsen pressure bath coupling?"))
        self.AddTree.topLevelItem(2).child(4).child(1).setText(1, _translate("simTab", "Target pressure"))
        self.AddTree.topLevelItem(2).child(4).child(2).setText(1, _translate("simTab", "Compressiility"))
        self.AddTree.topLevelItem(2).child(4).child(3).setText(1, _translate("simTab", "Relaxation time"))
        self.AddTree.topLevelItem(2).child(4).child(4).setText(1, _translate("simTab", "How often to rescale positions"))
        self.AddTree.topLevelItem(2).child(5).setText(0, _translate("simTab", "Nose-Hoover Langevin piston pressure control"))
        self.AddTree.topLevelItem(2).child(5).child(0).setText(1, _translate("simTab", "Use Langevin piston pressure control?"))
        self.AddTree.topLevelItem(2).child(5).child(1).setText(1, _translate("simTab", "Target pressure"))
        self.AddTree.topLevelItem(2).child(5).child(2).setText(1, _translate("simTab", "Oscillation period"))
        self.AddTree.topLevelItem(2).child(5).child(3).setText(1, _translate("simTab", "Damping time scale"))
        self.AddTree.topLevelItem(2).child(5).child(4).setText(1, _translate("simTab", "Noise temperature"))
        self.AddTree.topLevelItem(2).child(5).child(5).setText(1, _translate("simTab", "Surface tension target (dyn/cm)"))
        self.AddTree.topLevelItem(2).child(5).child(6).setText(1, _translate("simTab", "Initial strain rate (X)"))
        self.AddTree.topLevelItem(2).child(5).child(7).setText(1, _translate("simTab", "Initial strain rate (Y)"))
        self.AddTree.topLevelItem(2).child(5).child(8).setText(1, _translate("simTab", "Initial strain rate (Z)"))
        self.AddTree.topLevelItem(3).setText(0, _translate("simTab", "Applied Forces and Analysis"))
        self.AddTree.topLevelItem(3).child(0).setText(0, _translate("simTab", "Constant Forces"))
        self.AddTree.topLevelItem(3).child(0).child(0).setText(1, _translate("simTab", "Apply constant forces?"))
        self.AddTree.topLevelItem(3).child(0).child(1).setText(1, _translate("simTab", "PDB file containing forces to be applied"))
        self.AddTree.topLevelItem(3).child(1).setText(0, _translate("simTab", "External Electric Field"))
        self.AddTree.topLevelItem(3).child(1).child(0).setText(1, _translate("simTab", "Apply electric field?"))
        self.AddTree.topLevelItem(3).child(1).child(1).setText(1, _translate("simTab", "Electric field vector X"))
        self.AddTree.topLevelItem(3).child(1).child(2).setText(1, _translate("simTab", "Electric field vector Y"))
        self.AddTree.topLevelItem(3).child(1).child(3).setText(1, _translate("simTab", "Electric field vector Z"))
        self.AddTree.topLevelItem(3).child(2).setText(0, _translate("simTab", "Moving Constraints"))
        self.AddTree.topLevelItem(3).child(2).child(0).setText(1, _translate("simTab", "Are moving constraints active?"))
        self.AddTree.topLevelItem(3).child(2).child(1).setText(1, _translate("simTab", "Velocity of the reference position movement in X"))
        self.AddTree.topLevelItem(3).child(2).child(2).setText(1, _translate("simTab", "Velocity of the reference position movement in Y"))
        self.AddTree.topLevelItem(3).child(2).child(3).setText(1, _translate("simTab", "Velocity of the reference position movement in Z"))
        self.AddTree.topLevelItem(3).child(3).setText(0, _translate("simTab", "Rotating Constraints"))
        self.AddTree.topLevelItem(3).child(3).child(0).setText(1, _translate("simTab", "Are rotating constraints active?"))
        self.AddTree.topLevelItem(3).child(3).child(1).setText(1, _translate("simTab", "Axis of rotation X"))
        self.AddTree.topLevelItem(3).child(3).child(2).setText(1, _translate("simTab", "Axis of rotation Y"))
        self.AddTree.topLevelItem(3).child(3).child(3).setText(1, _translate("simTab", "Axis of rotation Z"))
        self.AddTree.topLevelItem(3).child(3).child(4).setText(1, _translate("simTab", "Pivot point of rotation X"))
        self.AddTree.topLevelItem(3).child(3).child(5).setText(1, _translate("simTab", "Pivot point of rotation Y"))
        self.AddTree.topLevelItem(3).child(3).child(6).setText(1, _translate("simTab", "Pivot point of rotation Z"))
        self.AddTree.topLevelItem(3).child(3).child(7).setText(1, _translate("simTab", "Angular velocity of rotation:"))
        self.AddTree.topLevelItem(3).child(4).setText(0, _translate("simTab", "Steered Molecular Dynamics (SMD)"))
        self.AddTree.topLevelItem(3).child(4).child(0).setText(1, _translate("simTab", "Use SMD?"))
        self.AddTree.topLevelItem(3).child(4).child(1).setText(1, _translate("simTab", "SMD constraint reference position"))
        self.AddTree.topLevelItem(3).child(4).child(2).setText(1, _translate("simTab", "Force constant to use in SMD simulation"))
        self.AddTree.topLevelItem(3).child(4).child(3).setText(1, _translate("simTab", "Velocity of SMD reference position movement"))
        self.AddTree.topLevelItem(3).child(4).child(4).setText(1, _translate("simTab", "Direction of SMD center of mass movement in X"))
        self.AddTree.topLevelItem(3).child(4).child(5).setText(1, _translate("simTab", "Direction of SMD center of mass movement in Y"))
        self.AddTree.topLevelItem(3).child(4).child(6).setText(1, _translate("simTab", "Direction of SMD center of mass movement in Z"))
        self.AddTree.topLevelItem(3).child(4).child(7).setText(1, _translate("simTab", "Frequency of SMD output"))
        self.AddTree.setSortingEnabled(__sortingEnabled)
        self.toolBox.setItemText(self.toolBox.indexOf(self.page3), _translate("simTab", "Page"))
        self.resetButton.setText(_translate("simTab", "Reset to Defaults"))
        self.packButton.setToolTip(_translate("simTab", "Pack configuration files"))
        self.remoteButton.setText(_translate("simTab", "Connection"))
        self.runButton.setText(_translate("simTab", "Run"))
        self.cancelButton.setText(_translate("simTab", "Stop"))

